
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "right=leftEQUALSNOTEQUALSleft+-left*/left^leftANDORnonassoc<>GTREQTHANLSSEQTHANrightUMINUSAND BOOL ELIF ELSE EQUALS FALSE FLOAT FLOATNUM FOR GTREQTHAN ID IF INT INTNUM LSSEQTHAN NOTEQUALS OR PRINT STRING STRINGVAL TRUE WHILEast : statementstatement : for statement\n                 | while statement\n                 | if statement\n                 | declare ';' statement\n                 | print ';' statement\n                 | while : WHILE '(' expression ')' '{' statement '}' for : FOR '(' assign ';' expression ';' idAssign ')' '{' statement '}' if : IF '(' expression ')' '{' statement '}' elif else elif : ELIF '(' expression ')' '{' statement '}' elif\n            |else : ELSE '{' statement '}'\n            | declare : assign\n               | declaration\n               | idAssignassign : type ID '=' expressiondeclaration : type IDtype : INT\n            | FLOAT\n            | STRING\n            | BOOLidAssign : ID '=' expressionprint : PRINT expressionexpression : expression '+' expression\n                  | expression '-' expression\n                  | expression '*' expression\n                  | expression '/' expression\n                  | expression '^' expression\n                  | expression EQUALS expression\n                  | expression NOTEQUALS expression\n                  | expression GTREQTHAN expression\n                  | expression LSSEQTHAN expression\n                  | expression '>' expression\n                  | expression '<' expression\n                  | expression AND expression\n                  | expression OR expressionexpression : '-' expression %prec UMINUSexpression : '(' expression ')' expression : INTNUM\n                  | FLOATNUM\n                  | STRINGVALexpression : TRUE\n               | FALSEexpression : ID"
    
_lr_action_items = {'$end':([0,1,2,3,4,5,21,22,23,24,25,40,41,89,90,92,95,101,104,107,108,],[-7,0,-1,-7,-7,-7,-2,-3,-4,-7,-7,-5,-6,-8,-12,-14,-10,-9,-13,-12,-11,]),'FOR':([0,3,4,5,24,25,83,84,89,90,92,94,95,99,101,104,105,107,108,],[8,8,8,8,8,8,8,8,-8,-12,-14,8,-10,8,-9,-13,8,-12,-11,]),'WHILE':([0,3,4,5,24,25,83,84,89,90,92,94,95,99,101,104,105,107,108,],[11,11,11,11,11,11,11,11,-8,-12,-14,11,-10,11,-9,-13,11,-12,-11,]),'IF':([0,3,4,5,24,25,83,84,89,90,92,94,95,99,101,104,105,107,108,],[12,12,12,12,12,12,12,12,-8,-12,-14,12,-10,12,-9,-13,12,-12,-11,]),'PRINT':([0,3,4,5,24,25,83,84,89,90,92,94,95,99,101,104,105,107,108,],[14,14,14,14,14,14,14,14,-8,-12,-14,14,-10,14,-9,-13,14,-12,-11,]),'ID':([0,3,4,5,14,15,17,18,19,20,24,25,27,28,30,31,39,43,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,83,84,85,89,90,92,94,95,97,99,101,104,105,107,108,],[16,16,16,16,37,38,-20,-21,-22,-23,16,16,37,37,37,37,37,64,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,16,16,16,-8,-12,-14,16,-10,37,16,-9,-13,16,-12,-11,]),'INT':([0,3,4,5,24,25,26,83,84,89,90,92,94,95,99,101,104,105,107,108,],[17,17,17,17,17,17,17,17,17,-8,-12,-14,17,-10,17,-9,-13,17,-12,-11,]),'FLOAT':([0,3,4,5,24,25,26,83,84,89,90,92,94,95,99,101,104,105,107,108,],[18,18,18,18,18,18,18,18,18,-8,-12,-14,18,-10,18,-9,-13,18,-12,-11,]),'STRING':([0,3,4,5,24,25,26,83,84,89,90,92,94,95,99,101,104,105,107,108,],[19,19,19,19,19,19,19,19,19,-8,-12,-14,19,-10,19,-9,-13,19,-12,-11,]),'BOOL':([0,3,4,5,24,25,26,83,84,89,90,92,94,95,99,101,104,105,107,108,],[20,20,20,20,20,20,20,20,20,-8,-12,-14,20,-10,20,-9,-13,20,-12,-11,]),'}':([3,4,5,21,22,23,24,25,40,41,83,84,86,87,89,90,92,94,95,98,99,101,102,104,105,106,107,108,],[-7,-7,-7,-2,-3,-4,-7,-7,-5,-6,-7,-7,89,90,-8,-12,-14,-7,-10,101,-7,-9,104,-13,-7,107,-12,-11,]),';':([6,7,9,10,13,29,32,33,34,35,36,37,38,42,59,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,],[24,25,-15,-17,-16,-25,-41,-42,-43,-44,-45,-46,-19,63,-39,-24,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-40,-18,85,]),'(':([8,11,12,14,27,28,30,31,39,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,93,97,],[26,27,28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,97,31,]),'-':([14,27,28,29,30,31,32,33,34,35,36,37,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,97,100,],[30,30,30,47,30,30,-41,-42,-43,-44,-45,-46,30,47,47,30,30,30,30,30,30,30,30,30,30,30,30,30,-39,47,30,47,30,-26,-27,-28,-29,-30,47,47,-33,-34,-35,-36,-37,-38,-40,47,47,30,47,]),'INTNUM':([14,27,28,30,31,39,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,97,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FLOATNUM':([14,27,28,30,31,39,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,97,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'STRINGVAL':([14,27,28,30,31,39,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,97,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'TRUE':([14,27,28,30,31,39,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,97,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FALSE':([14,27,28,30,31,39,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,97,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'=':([16,38,64,],[39,61,61,]),'+':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[46,-41,-42,-43,-44,-45,-46,46,46,-39,46,46,-26,-27,-28,-29,-30,46,46,-33,-34,-35,-36,-37,-38,-40,46,46,46,]),'*':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[48,-41,-42,-43,-44,-45,-46,48,48,-39,48,48,48,48,-28,-29,-30,48,48,-33,-34,-35,-36,-37,-38,-40,48,48,48,]),'/':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[49,-41,-42,-43,-44,-45,-46,49,49,-39,49,49,49,49,-28,-29,-30,49,49,-33,-34,-35,-36,-37,-38,-40,49,49,49,]),'^':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[50,-41,-42,-43,-44,-45,-46,50,50,-39,50,50,50,50,50,50,-30,50,50,-33,-34,-35,-36,-37,-38,-40,50,50,50,]),'EQUALS':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[51,-41,-42,-43,-44,-45,-46,51,51,-39,51,51,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-40,51,51,51,]),'NOTEQUALS':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[52,-41,-42,-43,-44,-45,-46,52,52,-39,52,52,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-40,52,52,52,]),'GTREQTHAN':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[53,-41,-42,-43,-44,-45,-46,53,53,-39,53,53,53,53,53,53,53,53,53,None,None,None,None,53,53,-40,53,53,53,]),'LSSEQTHAN':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[54,-41,-42,-43,-44,-45,-46,54,54,-39,54,54,54,54,54,54,54,54,54,None,None,None,None,54,54,-40,54,54,54,]),'>':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[55,-41,-42,-43,-44,-45,-46,55,55,-39,55,55,55,55,55,55,55,55,55,None,None,None,None,55,55,-40,55,55,55,]),'<':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[56,-41,-42,-43,-44,-45,-46,56,56,-39,56,56,56,56,56,56,56,56,56,None,None,None,None,56,56,-40,56,56,56,]),'AND':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[57,-41,-42,-43,-44,-45,-46,57,57,-39,57,57,57,57,57,57,57,57,57,-33,-34,-35,-36,-37,-38,-40,57,57,57,]),'OR':([29,32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,100,],[58,-41,-42,-43,-44,-45,-46,58,58,-39,58,58,58,58,58,58,58,58,58,-33,-34,-35,-36,-37,-38,-40,58,58,58,]),')':([32,33,34,35,36,37,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,80,88,100,],[-41,-42,-43,-44,-45,-46,65,66,-39,80,-24,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-40,91,103,]),'{':([65,66,91,96,103,],[83,84,94,99,105,]),'ELIF':([90,107,],[93,93,]),'ELSE':([90,92,107,108,],[-12,96,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'ast':([0,],[1,]),'statement':([0,3,4,5,24,25,83,84,94,99,105,],[2,21,22,23,40,41,86,87,98,102,106,]),'for':([0,3,4,5,24,25,83,84,94,99,105,],[3,3,3,3,3,3,3,3,3,3,3,]),'while':([0,3,4,5,24,25,83,84,94,99,105,],[4,4,4,4,4,4,4,4,4,4,4,]),'if':([0,3,4,5,24,25,83,84,94,99,105,],[5,5,5,5,5,5,5,5,5,5,5,]),'declare':([0,3,4,5,24,25,83,84,94,99,105,],[6,6,6,6,6,6,6,6,6,6,6,]),'print':([0,3,4,5,24,25,83,84,94,99,105,],[7,7,7,7,7,7,7,7,7,7,7,]),'assign':([0,3,4,5,24,25,26,83,84,94,99,105,],[9,9,9,9,9,9,42,9,9,9,9,9,]),'idAssign':([0,3,4,5,24,25,83,84,85,94,99,105,],[10,10,10,10,10,10,10,10,88,10,10,10,]),'declaration':([0,3,4,5,24,25,83,84,94,99,105,],[13,13,13,13,13,13,13,13,13,13,13,]),'type':([0,3,4,5,24,25,26,83,84,94,99,105,],[15,15,15,15,15,15,43,15,15,15,15,15,]),'expression':([14,27,28,30,31,39,46,47,48,49,50,51,52,53,54,55,56,57,58,61,63,97,],[29,44,45,59,60,62,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,100,]),'elif':([90,107,],[92,108,]),'else':([92,],[95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> ast","S'",1,None,None,None),
  ('ast -> statement','ast',1,'p_start','parser.py',21),
  ('statement -> for statement','statement',2,'p_statement','parser.py',26),
  ('statement -> while statement','statement',2,'p_statement','parser.py',27),
  ('statement -> if statement','statement',2,'p_statement','parser.py',28),
  ('statement -> declare ; statement','statement',3,'p_statement','parser.py',29),
  ('statement -> print ; statement','statement',3,'p_statement','parser.py',30),
  ('statement -> <empty>','statement',0,'p_statement','parser.py',31),
  ('while -> WHILE ( expression ) { statement }','while',7,'p_while','parser.py',40),
  ('for -> FOR ( assign ; expression ; idAssign ) { statement }','for',11,'p_for','parser.py',44),
  ('if -> IF ( expression ) { statement } elif else','if',9,'p_if','parser.py',48),
  ('elif -> ELIF ( expression ) { statement } elif','elif',8,'p_elif','parser.py',52),
  ('elif -> <empty>','elif',0,'p_elif','parser.py',53),
  ('else -> ELSE { statement }','else',4,'p_else','parser.py',60),
  ('else -> <empty>','else',0,'p_else','parser.py',61),
  ('declare -> assign','declare',1,'p_declare','parser.py',67),
  ('declare -> declaration','declare',1,'p_declare','parser.py',68),
  ('declare -> idAssign','declare',1,'p_declare','parser.py',69),
  ('assign -> type ID = expression','assign',4,'p_assign','parser.py',73),
  ('declaration -> type ID','declaration',2,'p_declaration','parser.py',78),
  ('type -> INT','type',1,'p_type','parser.py',83),
  ('type -> FLOAT','type',1,'p_type','parser.py',84),
  ('type -> STRING','type',1,'p_type','parser.py',85),
  ('type -> BOOL','type',1,'p_type','parser.py',86),
  ('idAssign -> ID = expression','idAssign',3,'p_idAssign','parser.py',90),
  ('print -> PRINT expression','print',2,'p_print','parser.py',95),
  ('expression -> expression + expression','expression',3,'p_expression_operation','parser.py',100),
  ('expression -> expression - expression','expression',3,'p_expression_operation','parser.py',101),
  ('expression -> expression * expression','expression',3,'p_expression_operation','parser.py',102),
  ('expression -> expression / expression','expression',3,'p_expression_operation','parser.py',103),
  ('expression -> expression ^ expression','expression',3,'p_expression_operation','parser.py',104),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_operation','parser.py',105),
  ('expression -> expression NOTEQUALS expression','expression',3,'p_expression_operation','parser.py',106),
  ('expression -> expression GTREQTHAN expression','expression',3,'p_expression_operation','parser.py',107),
  ('expression -> expression LSSEQTHAN expression','expression',3,'p_expression_operation','parser.py',108),
  ('expression -> expression > expression','expression',3,'p_expression_operation','parser.py',109),
  ('expression -> expression < expression','expression',3,'p_expression_operation','parser.py',110),
  ('expression -> expression AND expression','expression',3,'p_expression_operation','parser.py',111),
  ('expression -> expression OR expression','expression',3,'p_expression_operation','parser.py',112),
  ('expression -> - expression','expression',2,'p_expression_uminus','parser.py',116),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',120),
  ('expression -> INTNUM','expression',1,'p_expression_number','parser.py',124),
  ('expression -> FLOATNUM','expression',1,'p_expression_number','parser.py',125),
  ('expression -> STRINGVAL','expression',1,'p_expression_number','parser.py',126),
  ('expression -> TRUE','expression',1,'p_boolVal','parser.py',131),
  ('expression -> FALSE','expression',1,'p_boolVal','parser.py',132),
  ('expression -> ID','expression',1,'p_expression_ID','parser.py',139),
]
